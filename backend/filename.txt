
Roadmap for CP in C++

1) Step 0:

Get an idea of the C programming language. At this point no need of getting too deep in architecture of C.
Just look into the basic things like How to do I/O , string manipulation, array operations in C, if-else and loops and functions.  
Also Try doing basic questions in pure C.

Resources:-
a) The C programming language (only first 5 chapters. Feel free to skip the pointers part *if you are focuused about CP only* )
resource link:- https://www.mcemotihari.ac.in/wp-content/uploads/2019/11/file_5dc2a70005960.pdf

b) lecture materials for your course Introduction to Programming will be a great resource for this. You can solely rely on the
lecture materials shared with you instead of book if you have a working overview of C

c) practice material :- https://www.w3resource.com/c-programming-exercises/

2) Step 1:

Now that you know how C works . Go to codeforces and try to solve problems no more than 1000
rating in C itself (GNU C11). Also you can check out leetcode POTDs and gfg POTDS. Note that it might happen that frequently
you might find that solving the question in C wont be feasible. Feel free to skip the question. Note that this step is
a precursor to CP and your motive should be building the problem solving skills.

Resources:-
a) Leetcode :- https://leetcode.com/
b) Geeks for Geeks :- https://www.geeksforgeeks.org/
c) Coding Ninjas :- https://www.codingninjas.com/
d) Our beloved OG Codeforces :- https://codeforces.com/
e) Our second beloved Codechef :- https://www.codechef.com/

3) Step 2:

Now start participating in contests on CF and CodeChef. This is the most critical point. Dont think that "I would learn all the stuff
and then go to participate" because learning is a lifelong phenomena and you wont be able to develop the competitive spirit unless
you actually start participating in contests. On CF if you are in div 2 try solving at least 1 question and for div3 try solving at least
2-3 questions and for div4 aim 4. Similarly for chef presumably if you are a div4 guy target at least 3 questions.

4) Step 3:

Now begin the transition phase to C++. Explore STL and use data structures in the STL library like vectors,string,maps,queues,stacks,sets,multisets,
priority_queues. Also learn about what functions each of the data structures provide like sorting,upper_bound,lower_bound (You are going to
use these a lot). First learn about STL and then solve problems and while solving problems you are going to get idea of which data structure
to use when and what are the corresponding functions provided by them

Resources:-
a) Geeks for Geeks article on STL :- https://www.geeksforgeeks.org/the-c-standard-template-library-stl/
b) CP playlist by Luv (Youtube) :- https://www.youtube.com/watch?v=R5BEcvTVZj0&list=PLauivoElc3gh3RCiQA82MDI-gJfXQQVnn
c) Cybelabs :- https://cp.cyberlabs.club/docs/roadmap/stl/stl-tutorials/

5) Step 4:

Practice. This is the portion that will take most time and patience. Most people leave CP at this stage. This stage is all about your rating
having a rollercoaster ride. You need to appear for contests regularly irrespective of how good or bad you are trying. At this stage yu target should be
making at least 2 questions for div 2 , at least 4 for div 3 and 5 for div 4. This is also the time that you have to devote significant amount of time for
learning algorithms assuming now you have idea of data strucures as discussed in Step 3.

*******Algorithms********

1) Simple Greedy :- 
a) https://www.geeksforgeeks.org/greedy-algorithms/
b) ofcourse our beloved Codeforces
c) CSES problemset :- https://cses.fi/problemset/ (Note here you dont have any subsection named greedy
but might find the introductory and sorting ,searching problems somewhat greedy-like)

2) Number Theory and some simple algorithms :-
a) Book :- Elementay number theory (Just first 2-3 chapters . Also skip the difficult parts)
b) Prime factorization algorithm
c) Eucleid's GCD finding algorithm
d) Sieve of Erastosthenes

3) Binary Search :-

a) CP algorithms (https://cp-algorithms.com/num_methods/binary_search.html. i think this has been blocked by our dear college . use VPN instead)
b) USACO guide on binary search ( use VPN )
c) This gem edu course on Codeforces :- https://codeforces.com/edu/course/2/lesson/6

4) Bitmasking :-

a) https://codeforces.com/blog/entry/18169
b) https://cp-algorithms.com/algebra/bit-manipulation.html (use VPN)
c) Actually this topic requires a handsome intuition and abstract thinking so no article would be of much use
if you dont practice questions

6) Once This is done now you are most probably a pupil. Now begins the next step. Try to improve upon speed.
Not just focus on problem solving. focus on you speed. For div3 try to get the first 3 questions done within 40 -50 minutes.
For div 2 get the first 2 questions done in ariund 40 mins and for div4 aim 5 questions in first 1 hour. Use the CP friendly 
tools like cph which we have already shown you. Now you might also want to explore some advanced data structures like

a) Ordered set
b) Graphs

7) Going to advanced algorithms :-

*****Dynamic Programming********

a) For theory and basic exposure :- https://www.geeksforgeeks.org/dynamic-programming/
b) CSES problem set
c) codeforces dp questions

for CP you need to specifically focus on 1D dp and bottom up approach more than memoization

*****Advanced Data STructures*******

a) segment trees :- https://cp-algorithms.com/data_structures/segment_tree.html
b) tries :- https://www.geeksforgeeks.org/trie-insert-and-search/
c) sparse table :- https://cp-algorithms.com/data_structures/sparse-table.html
d) disjoint set union :- https://cp-algorithms.com/data_structures/disjoint_set_union.html

*****Graph Algorithms**************

a) Graph representation using Adjacency list and matrix
b) bfs,dfs,djikstras,bellman-ford
c) MSTs,Prims,Krushkals
d) dp on graphs and trees

Resources :- CP algorithms and miscallenous (YouTube, Editorials, Blog posts on CF)



8) Debugging :-

explore gdb . This is very essential if you want to become software engineer in future. A debugger basically
is used to understand the correctness of your program. In more complex problems you may want to use gdb to ensure that
the control flow is really occurring as per expectation

Resources:-
a) https://web.eecs.umich.edu/~sugih/pointers/summary.html
b) https://users.ece.utexas.edu/~adnan/gdb-refcard.pdf

9) Improving upon yourself :-

Once you have done all these now you are set. Now all you need to do is appearing for contests and 
trying to solve problems consistently in a limited timespan and quickly.



Best Of luck
Happy Coding

